{"version":3,"sources":["../src/bedrock-provider.ts","../src/bedrock-chat-language-model.ts","../src/convert-to-bedrock-chat-messages.ts","../src/map-bedrock-finish-reason.ts"],"sourcesContent":["import {\n  LanguageModelV1,\n  NoSuchModelError,\n  ProviderV1,\n} from '@ai-sdk/provider';\nimport {\n  generateId,\n  loadOptionalSetting,\n  loadSetting,\n} from '@ai-sdk/provider-utils';\nimport {\n  BedrockRuntimeClient,\n  BedrockRuntimeClientConfig,\n} from '@aws-sdk/client-bedrock-runtime';\nimport { BedrockChatLanguageModel } from './bedrock-chat-language-model';\nimport {\n  BedrockChatModelId,\n  BedrockChatSettings,\n} from './bedrock-chat-settings';\n\nexport interface AmazonBedrockProviderSettings {\n  region?: string;\n  accessKeyId?: string;\n  secretAccessKey?: string;\n  sessionToken?: string;\n\n  /**\n   * Complete Bedrock configuration for setting advanced authentication and\n   * other options. When this is provided, the region, accessKeyId, and\n   * secretAccessKey settings are ignored.\n   */\n  bedrockOptions?: BedrockRuntimeClientConfig;\n\n  // for testing\n  generateId?: () => string;\n}\n\nexport interface AmazonBedrockProvider extends ProviderV1 {\n  (\n    modelId: BedrockChatModelId,\n    settings?: BedrockChatSettings,\n  ): LanguageModelV1;\n\n  languageModel(\n    modelId: BedrockChatModelId,\n    settings?: BedrockChatSettings,\n  ): LanguageModelV1;\n}\n\n/**\nCreate an Amazon Bedrock provider instance.\n */\nexport function createAmazonBedrock(\n  options: AmazonBedrockProviderSettings = {},\n): AmazonBedrockProvider {\n  const createBedrockRuntimeClient = () =>\n    new BedrockRuntimeClient(\n      options.bedrockOptions ?? {\n        region: loadSetting({\n          settingValue: options.region,\n          settingName: 'region',\n          environmentVariableName: 'AWS_REGION',\n          description: 'AWS region',\n        }),\n        credentials: {\n          accessKeyId: loadSetting({\n            settingValue: options.accessKeyId,\n            settingName: 'accessKeyId',\n            environmentVariableName: 'AWS_ACCESS_KEY_ID',\n            description: 'AWS access key ID',\n          }),\n          secretAccessKey: loadSetting({\n            settingValue: options.secretAccessKey,\n            settingName: 'secretAccessKey',\n            environmentVariableName: 'AWS_SECRET_ACCESS_KEY',\n            description: 'AWS secret access key',\n          }),\n          sessionToken: loadOptionalSetting({\n            settingValue: options.sessionToken,\n            environmentVariableName: 'AWS_SESSION_TOKEN',\n          }),\n        },\n      },\n    );\n\n  const createChatModel = (\n    modelId: BedrockChatModelId,\n    settings: BedrockChatSettings = {},\n  ) =>\n    new BedrockChatLanguageModel(modelId, settings, {\n      client: createBedrockRuntimeClient(),\n      generateId,\n    });\n\n  const provider = function (\n    modelId: BedrockChatModelId,\n    settings?: BedrockChatSettings,\n  ) {\n    if (new.target) {\n      throw new Error(\n        'The Amazon Bedrock model function cannot be called with the new keyword.',\n      );\n    }\n\n    return createChatModel(modelId, settings);\n  };\n\n  provider.languageModel = createChatModel;\n  provider.textEmbeddingModel = (modelId: string) => {\n    throw new NoSuchModelError({ modelId, modelType: 'textEmbeddingModel' });\n  };\n\n  return provider as AmazonBedrockProvider;\n}\n\n/**\nDefault Bedrock provider instance.\n */\nexport const bedrock = createAmazonBedrock();\n","import {\n  JSONObject,\n  LanguageModelV1,\n  LanguageModelV1CallWarning,\n  LanguageModelV1FinishReason,\n  LanguageModelV1ProviderMetadata,\n  LanguageModelV1StreamPart,\n  UnsupportedFunctionalityError,\n} from '@ai-sdk/provider';\nimport { ParseResult } from '@ai-sdk/provider-utils';\nimport {\n  BedrockRuntimeClient,\n  ConverseCommand,\n  ConverseCommandInput,\n  ConverseStreamCommand,\n  ConverseStreamOutput,\n  GuardrailConfiguration,\n  GuardrailStreamConfiguration,\n  Tool,\n  ToolConfiguration,\n  ToolInputSchema,\n} from '@aws-sdk/client-bedrock-runtime';\nimport {\n  BedrockChatModelId,\n  BedrockChatSettings,\n} from './bedrock-chat-settings';\nimport { convertToBedrockChatMessages } from './convert-to-bedrock-chat-messages';\nimport { mapBedrockFinishReason } from './map-bedrock-finish-reason';\n\ntype BedrockChatConfig = {\n  client: BedrockRuntimeClient;\n  generateId: () => string;\n};\n\nexport class BedrockChatLanguageModel implements LanguageModelV1 {\n  readonly specificationVersion = 'v1';\n  readonly provider = 'amazon-bedrock';\n  readonly defaultObjectGenerationMode = 'tool';\n  readonly supportsImageUrls = false;\n\n  readonly modelId: BedrockChatModelId;\n  readonly settings: BedrockChatSettings;\n\n  private readonly config: BedrockChatConfig;\n\n  constructor(\n    modelId: BedrockChatModelId,\n    settings: BedrockChatSettings,\n    config: BedrockChatConfig,\n  ) {\n    this.modelId = modelId;\n    this.settings = settings;\n    this.config = config;\n  }\n\n  private async getArgs({\n    mode,\n    prompt,\n    maxTokens,\n    temperature,\n    topP,\n    topK,\n    frequencyPenalty,\n    presencePenalty,\n    stopSequences,\n    responseFormat,\n    seed,\n    providerMetadata,\n    headers,\n  }: Parameters<LanguageModelV1['doGenerate']>[0]) {\n    const type = mode.type;\n\n    const warnings: LanguageModelV1CallWarning[] = [];\n\n    if (frequencyPenalty != null) {\n      warnings.push({\n        type: 'unsupported-setting',\n        setting: 'frequencyPenalty',\n      });\n    }\n\n    if (presencePenalty != null) {\n      warnings.push({\n        type: 'unsupported-setting',\n        setting: 'presencePenalty',\n      });\n    }\n\n    if (seed != null) {\n      warnings.push({\n        type: 'unsupported-setting',\n        setting: 'seed',\n      });\n    }\n\n    if (headers != null) {\n      warnings.push({\n        type: 'unsupported-setting',\n        setting: 'headers',\n      });\n    }\n\n    if (topK != null) {\n      warnings.push({\n        type: 'unsupported-setting',\n        setting: 'topK',\n      });\n    }\n\n    if (responseFormat != null && responseFormat.type !== 'text') {\n      warnings.push({\n        type: 'unsupported-setting',\n        setting: 'responseFormat',\n        details: 'JSON response format is not supported.',\n      });\n    }\n\n    const { system, messages } = convertToBedrockChatMessages(prompt);\n\n    const baseArgs: ConverseCommandInput = {\n      modelId: this.modelId,\n      system: system ? [{ text: system }] : undefined,\n      additionalModelRequestFields: this.settings.additionalModelRequestFields,\n      inferenceConfig: {\n        maxTokens,\n        temperature,\n        topP,\n        stopSequences,\n      },\n      messages,\n      guardrailConfig: providerMetadata?.bedrock?.guardrailConfig as\n        | GuardrailConfiguration\n        | GuardrailStreamConfiguration\n        | undefined,\n    };\n\n    switch (type) {\n      case 'regular': {\n        const toolConfig = prepareToolsAndToolChoice(mode);\n\n        return {\n          ...baseArgs,\n          ...(toolConfig.tools?.length ? { toolConfig } : {}),\n        } satisfies ConverseCommandInput;\n      }\n\n      case 'object-json': {\n        throw new UnsupportedFunctionalityError({\n          functionality: 'json-mode object generation',\n        });\n      }\n\n      case 'object-tool': {\n        return {\n          ...baseArgs,\n          toolConfig: {\n            tools: [\n              {\n                toolSpec: {\n                  name: mode.tool.name,\n                  description: mode.tool.description,\n                  inputSchema: {\n                    json: mode.tool.parameters,\n                  } as ToolInputSchema,\n                },\n              },\n            ],\n            toolChoice: { tool: { name: mode.tool.name } },\n          },\n        } satisfies ConverseCommandInput;\n      }\n\n      default: {\n        const _exhaustiveCheck: never = type;\n        throw new Error(`Unsupported type: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n\n  async doGenerate(\n    options: Parameters<LanguageModelV1['doGenerate']>[0],\n  ): Promise<Awaited<ReturnType<LanguageModelV1['doGenerate']>>> {\n    const args = await this.getArgs(options);\n\n    const response = await this.config.client.send(new ConverseCommand(args));\n\n    const { messages: rawPrompt, ...rawSettings } = args;\n\n    const providerMetadata = response.trace\n      ? { bedrock: { trace: response.trace as JSONObject } }\n      : undefined;\n\n    return {\n      text:\n        response.output?.message?.content\n          ?.map(part => part.text ?? '')\n          .join('') ?? undefined,\n      toolCalls: response.output?.message?.content\n        ?.filter(part => !!part.toolUse)\n        ?.map(part => ({\n          toolCallType: 'function',\n          toolCallId: part.toolUse?.toolUseId ?? this.config.generateId(),\n          toolName: part.toolUse?.name ?? `tool-${this.config.generateId()}`,\n          args: JSON.stringify(part.toolUse?.input ?? ''),\n        })),\n      finishReason: mapBedrockFinishReason(response.stopReason),\n      usage: {\n        promptTokens: response.usage?.inputTokens ?? Number.NaN,\n        completionTokens: response.usage?.outputTokens ?? Number.NaN,\n      },\n      rawCall: { rawPrompt, rawSettings },\n      warnings: [],\n      providerMetadata,\n    };\n  }\n\n  async doStream(\n    options: Parameters<LanguageModelV1['doStream']>[0],\n  ): Promise<Awaited<ReturnType<LanguageModelV1['doStream']>>> {\n    const args = await this.getArgs(options);\n\n    const response = await this.config.client.send(\n      new ConverseStreamCommand({ ...args }),\n    );\n\n    const { messages: rawPrompt, ...rawSettings } = args;\n\n    let finishReason: LanguageModelV1FinishReason = 'unknown';\n    let usage: { promptTokens: number; completionTokens: number } = {\n      promptTokens: Number.NaN,\n      completionTokens: Number.NaN,\n    };\n    let providerMetadata: LanguageModelV1ProviderMetadata | undefined =\n      undefined;\n\n    if (!response.stream) {\n      throw new Error('No stream found');\n    }\n\n    const stream = new ReadableStream<any>({\n      async start(controller) {\n        for await (const chunk of response.stream!) {\n          controller.enqueue({ success: true, value: chunk });\n        }\n        controller.close();\n      },\n    });\n\n    let toolName = '';\n    let toolCallId = '';\n    let toolCallArgs = '';\n\n    return {\n      stream: stream.pipeThrough(\n        new TransformStream<\n          ParseResult<ConverseStreamOutput>,\n          LanguageModelV1StreamPart\n        >({\n          transform(chunk, controller) {\n            function enqueueError(error: Error) {\n              finishReason = 'error';\n              controller.enqueue({ type: 'error', error });\n            }\n\n            // handle failed chunk parsing / validation:\n            if (!chunk.success) {\n              enqueueError(chunk.error);\n              return;\n            }\n\n            const value = chunk.value;\n\n            // handle errors:\n            if (value.internalServerException) {\n              enqueueError(value.internalServerException);\n              return;\n            }\n            if (value.modelStreamErrorException) {\n              enqueueError(value.modelStreamErrorException);\n              return;\n            }\n            if (value.throttlingException) {\n              enqueueError(value.throttlingException);\n              return;\n            }\n            if (value.validationException) {\n              enqueueError(value.validationException);\n              return;\n            }\n\n            if (value.messageStop) {\n              finishReason = mapBedrockFinishReason(\n                value.messageStop.stopReason,\n              );\n            }\n\n            if (value.metadata) {\n              usage = {\n                promptTokens: value.metadata.usage?.inputTokens ?? Number.NaN,\n                completionTokens:\n                  value.metadata.usage?.outputTokens ?? Number.NaN,\n              };\n\n              if (value.metadata.trace) {\n                providerMetadata = {\n                  bedrock: {\n                    trace: value.metadata.trace as JSONObject,\n                  },\n                };\n              }\n            }\n\n            if (value.contentBlockDelta?.delta?.text) {\n              controller.enqueue({\n                type: 'text-delta',\n                textDelta: value.contentBlockDelta.delta.text,\n              });\n            }\n\n            if (value.contentBlockStart?.start?.toolUse) {\n              // store the tool name and id for the next chunk\n              const toolUse = value.contentBlockStart.start.toolUse;\n              toolName = toolUse.name ?? '';\n              toolCallId = toolUse.toolUseId ?? '';\n            }\n\n            if (value.contentBlockDelta?.delta?.toolUse) {\n              // continue to get the chunks of the tool call args\n              toolCallArgs += value.contentBlockDelta.delta.toolUse.input ?? '';\n\n              controller.enqueue({\n                type: 'tool-call-delta',\n                toolCallType: 'function',\n                toolCallId,\n                toolName,\n                argsTextDelta:\n                  value.contentBlockDelta.delta.toolUse.input ?? '',\n              });\n            }\n\n            // if the content is done and a tool call was made, send it\n            if (value.contentBlockStop && toolCallArgs.length > 0) {\n              controller.enqueue({\n                type: 'tool-call',\n                toolCallType: 'function',\n                toolCallId,\n                toolName,\n                args: toolCallArgs,\n              });\n            }\n          },\n\n          flush(controller) {\n            controller.enqueue({\n              type: 'finish',\n              finishReason,\n              usage,\n              providerMetadata,\n            });\n          },\n        }),\n      ),\n      rawCall: { rawPrompt, rawSettings },\n      warnings: [],\n    };\n  }\n}\n\nfunction prepareToolsAndToolChoice(\n  mode: Parameters<LanguageModelV1['doGenerate']>[0]['mode'] & {\n    type: 'regular';\n  },\n): ToolConfiguration {\n  // when the tools array is empty, change it to undefined to prevent errors:\n  const tools = mode.tools?.length ? mode.tools : undefined;\n\n  if (tools == null) {\n    return { tools: undefined, toolChoice: undefined };\n  }\n\n  const mappedTools: Tool[] = tools.map(tool => ({\n    toolSpec: {\n      name: tool.name,\n      description: tool.description,\n      inputSchema: {\n        json: tool.parameters,\n      } as ToolInputSchema,\n    },\n  }));\n\n  const toolChoice = mode.toolChoice;\n\n  if (toolChoice == null) {\n    return { tools: mappedTools, toolChoice: undefined };\n  }\n\n  const type = toolChoice.type;\n\n  switch (type) {\n    case 'auto':\n      return { tools: mappedTools, toolChoice: { auto: {} } };\n    case 'required':\n      return { tools: mappedTools, toolChoice: { any: {} } };\n    case 'none':\n      // Bedrock does not support 'none' tool choice, so we remove the tools:\n      return { tools: undefined, toolChoice: undefined };\n    case 'tool':\n      return {\n        tools: mappedTools,\n        toolChoice: { tool: { name: toolChoice.toolName } },\n      };\n    default: {\n      const _exhaustiveCheck: never = type;\n      throw new Error(`Unsupported tool choice type: ${_exhaustiveCheck}`);\n    }\n  }\n}\n","import {\n  LanguageModelV1Prompt,\n  UnsupportedFunctionalityError,\n} from '@ai-sdk/provider';\nimport { ContentBlock, ImageFormat } from '@aws-sdk/client-bedrock-runtime';\nimport { BedrockMessages, BedrockMessagesPrompt } from './bedrock-chat-prompt';\n\nexport function convertToBedrockChatMessages(\n  prompt: LanguageModelV1Prompt,\n): BedrockMessagesPrompt {\n  let system: string | undefined = undefined;\n  const messages: BedrockMessages = [];\n\n  for (const { role, content } of prompt) {\n    switch (role) {\n      case 'system': {\n        if (messages.length > 0) {\n          throw new UnsupportedFunctionalityError({\n            functionality: 'System message after non-system message',\n          });\n        }\n\n        system = system === undefined ? content : `${system}\\n${content}`;\n\n        break;\n      }\n\n      case 'user': {\n        const bedrockMessageContent: ContentBlock[] = [];\n\n        for (const part of content) {\n          switch (part.type) {\n            case 'text': {\n              bedrockMessageContent.push({ text: part.text });\n              break;\n            }\n\n            case 'image': {\n              if (part.image instanceof URL) {\n                // The AI SDK automatically downloads images for user image parts with URLs\n                throw new UnsupportedFunctionalityError({\n                  functionality: 'Image URLs in user messages',\n                });\n              }\n\n              bedrockMessageContent.push({\n                image: {\n                  format: part.mimeType?.split('/')?.[1] as ImageFormat,\n                  source: {\n                    bytes: part.image ?? (part.image as Uint8Array),\n                  },\n                },\n              });\n              break;\n            }\n          }\n        }\n\n        messages.push({\n          role: 'user',\n          content: bedrockMessageContent,\n        });\n\n        break;\n      }\n\n      case 'assistant': {\n        const toolUse: Array<{\n          toolUseId: string;\n          name: string;\n          input: any;\n        }> = [];\n\n        let text = '';\n        for (const part of content) {\n          switch (part.type) {\n            case 'text': {\n              text += part.text;\n              break;\n            }\n            case 'tool-call': {\n              toolUse.push({\n                toolUseId: part.toolCallId,\n                name: part.toolName,\n                input: part.args,\n              });\n              break;\n            }\n            default: {\n              const _exhaustiveCheck: never = part;\n              throw new Error(`Unsupported part: ${_exhaustiveCheck}`);\n            }\n          }\n        }\n\n        messages.push({\n          role: 'assistant',\n          content: [\n            ...(text ? [{ text }] : []),\n            ...toolUse.map(toolUse => ({ toolUse: toolUse })),\n          ],\n        });\n\n        break;\n      }\n\n      case 'tool':\n        messages.push({\n          role: 'user',\n          content: content.map(part => ({\n            toolResult: {\n              toolUseId: part.toolCallId,\n              status: part.isError ? 'error' : 'success',\n              content: [{ text: JSON.stringify(part.result) }],\n            },\n          })),\n        });\n        break;\n\n      default: {\n        throw new Error(`Unsupported role: ${role}`);\n      }\n    }\n  }\n\n  return { system, messages };\n}\n","import { LanguageModelV1FinishReason } from '@ai-sdk/provider';\nimport { StopReason } from '@aws-sdk/client-bedrock-runtime';\n\nexport function mapBedrockFinishReason(\n  finishReason?: StopReason,\n): LanguageModelV1FinishReason {\n  switch (finishReason) {\n    case 'stop_sequence':\n    case 'end_turn':\n      return 'stop';\n    case 'max_tokens':\n      return 'length';\n    case 'content_filtered':\n    case 'guardrail_intervened':\n      return 'content-filter';\n    case 'tool_use':\n      return 'tool-calls';\n    default:\n      return 'unknown';\n  }\n}\n"],"mappings":";AAAA;AAAA,EAEE;AAAA,OAEK;AACP;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,OACK;AACP;AAAA,EACE,wBAAAA;AAAA,OAEK;;;ACbP;AAAA,EAOE,iCAAAC;AAAA,OACK;AAEP;AAAA,EAEE;AAAA,EAEA;AAAA,OAOK;;;ACrBP;AAAA,EAEE;AAAA,OACK;AAIA,SAAS,6BACd,QACuB;AATzB;AAUE,MAAI,SAA6B;AACjC,QAAM,WAA4B,CAAC;AAEnC,aAAW,EAAE,MAAM,QAAQ,KAAK,QAAQ;AACtC,YAAQ,MAAM;AAAA,MACZ,KAAK,UAAU;AACb,YAAI,SAAS,SAAS,GAAG;AACvB,gBAAM,IAAI,8BAA8B;AAAA,YACtC,eAAe;AAAA,UACjB,CAAC;AAAA,QACH;AAEA,iBAAS,WAAW,SAAY,UAAU,GAAG,MAAM;AAAA,EAAK,OAAO;AAE/D;AAAA,MACF;AAAA,MAEA,KAAK,QAAQ;AACX,cAAM,wBAAwC,CAAC;AAE/C,mBAAW,QAAQ,SAAS;AAC1B,kBAAQ,KAAK,MAAM;AAAA,YACjB,KAAK,QAAQ;AACX,oCAAsB,KAAK,EAAE,MAAM,KAAK,KAAK,CAAC;AAC9C;AAAA,YACF;AAAA,YAEA,KAAK,SAAS;AACZ,kBAAI,KAAK,iBAAiB,KAAK;AAE7B,sBAAM,IAAI,8BAA8B;AAAA,kBACtC,eAAe;AAAA,gBACjB,CAAC;AAAA,cACH;AAEA,oCAAsB,KAAK;AAAA,gBACzB,OAAO;AAAA,kBACL,SAAQ,gBAAK,aAAL,mBAAe,MAAM,SAArB,mBAA4B;AAAA,kBACpC,QAAQ;AAAA,oBACN,QAAO,UAAK,UAAL,YAAe,KAAK;AAAA,kBAC7B;AAAA,gBACF;AAAA,cACF,CAAC;AACD;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAEA,iBAAS,KAAK;AAAA,UACZ,MAAM;AAAA,UACN,SAAS;AAAA,QACX,CAAC;AAED;AAAA,MACF;AAAA,MAEA,KAAK,aAAa;AAChB,cAAM,UAID,CAAC;AAEN,YAAI,OAAO;AACX,mBAAW,QAAQ,SAAS;AAC1B,kBAAQ,KAAK,MAAM;AAAA,YACjB,KAAK,QAAQ;AACX,sBAAQ,KAAK;AACb;AAAA,YACF;AAAA,YACA,KAAK,aAAa;AAChB,sBAAQ,KAAK;AAAA,gBACX,WAAW,KAAK;AAAA,gBAChB,MAAM,KAAK;AAAA,gBACX,OAAO,KAAK;AAAA,cACd,CAAC;AACD;AAAA,YACF;AAAA,YACA,SAAS;AACP,oBAAM,mBAA0B;AAChC,oBAAM,IAAI,MAAM,qBAAqB,gBAAgB,EAAE;AAAA,YACzD;AAAA,UACF;AAAA,QACF;AAEA,iBAAS,KAAK;AAAA,UACZ,MAAM;AAAA,UACN,SAAS;AAAA,YACP,GAAI,OAAO,CAAC,EAAE,KAAK,CAAC,IAAI,CAAC;AAAA,YACzB,GAAG,QAAQ,IAAI,CAAAC,cAAY,EAAE,SAASA,SAAQ,EAAE;AAAA,UAClD;AAAA,QACF,CAAC;AAED;AAAA,MACF;AAAA,MAEA,KAAK;AACH,iBAAS,KAAK;AAAA,UACZ,MAAM;AAAA,UACN,SAAS,QAAQ,IAAI,WAAS;AAAA,YAC5B,YAAY;AAAA,cACV,WAAW,KAAK;AAAA,cAChB,QAAQ,KAAK,UAAU,UAAU;AAAA,cACjC,SAAS,CAAC,EAAE,MAAM,KAAK,UAAU,KAAK,MAAM,EAAE,CAAC;AAAA,YACjD;AAAA,UACF,EAAE;AAAA,QACJ,CAAC;AACD;AAAA,MAEF,SAAS;AACP,cAAM,IAAI,MAAM,qBAAqB,IAAI,EAAE;AAAA,MAC7C;AAAA,IACF;AAAA,EACF;AAEA,SAAO,EAAE,QAAQ,SAAS;AAC5B;;;AC3HO,SAAS,uBACd,cAC6B;AAC7B,UAAQ,cAAc;AAAA,IACpB,KAAK;AAAA,IACL,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AAAA,IACL,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT;AACE,aAAO;AAAA,EACX;AACF;;;AFcO,IAAM,2BAAN,MAA0D;AAAA,EAW/D,YACE,SACA,UACA,QACA;AAdF,SAAS,uBAAuB;AAChC,SAAS,WAAW;AACpB,SAAS,8BAA8B;AACvC,SAAS,oBAAoB;AAY3B,SAAK,UAAU;AACf,SAAK,WAAW;AAChB,SAAK,SAAS;AAAA,EAChB;AAAA,EAEA,MAAc,QAAQ;AAAA,IACpB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,GAAiD;AArEnD;AAsEI,UAAM,OAAO,KAAK;AAElB,UAAM,WAAyC,CAAC;AAEhD,QAAI,oBAAoB,MAAM;AAC5B,eAAS,KAAK;AAAA,QACZ,MAAM;AAAA,QACN,SAAS;AAAA,MACX,CAAC;AAAA,IACH;AAEA,QAAI,mBAAmB,MAAM;AAC3B,eAAS,KAAK;AAAA,QACZ,MAAM;AAAA,QACN,SAAS;AAAA,MACX,CAAC;AAAA,IACH;AAEA,QAAI,QAAQ,MAAM;AAChB,eAAS,KAAK;AAAA,QACZ,MAAM;AAAA,QACN,SAAS;AAAA,MACX,CAAC;AAAA,IACH;AAEA,QAAI,WAAW,MAAM;AACnB,eAAS,KAAK;AAAA,QACZ,MAAM;AAAA,QACN,SAAS;AAAA,MACX,CAAC;AAAA,IACH;AAEA,QAAI,QAAQ,MAAM;AAChB,eAAS,KAAK;AAAA,QACZ,MAAM;AAAA,QACN,SAAS;AAAA,MACX,CAAC;AAAA,IACH;AAEA,QAAI,kBAAkB,QAAQ,eAAe,SAAS,QAAQ;AAC5D,eAAS,KAAK;AAAA,QACZ,MAAM;AAAA,QACN,SAAS;AAAA,QACT,SAAS;AAAA,MACX,CAAC;AAAA,IACH;AAEA,UAAM,EAAE,QAAQ,SAAS,IAAI,6BAA6B,MAAM;AAEhE,UAAM,WAAiC;AAAA,MACrC,SAAS,KAAK;AAAA,MACd,QAAQ,SAAS,CAAC,EAAE,MAAM,OAAO,CAAC,IAAI;AAAA,MACtC,8BAA8B,KAAK,SAAS;AAAA,MAC5C,iBAAiB;AAAA,QACf;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,MACA;AAAA,MACA,kBAAiB,0DAAkB,YAAlB,mBAA2B;AAAA,IAI9C;AAEA,YAAQ,MAAM;AAAA,MACZ,KAAK,WAAW;AACd,cAAM,aAAa,0BAA0B,IAAI;AAEjD,eAAO;AAAA,UACL,GAAG;AAAA,UACH,KAAI,gBAAW,UAAX,mBAAkB,UAAS,EAAE,WAAW,IAAI,CAAC;AAAA,QACnD;AAAA,MACF;AAAA,MAEA,KAAK,eAAe;AAClB,cAAM,IAAIC,+BAA8B;AAAA,UACtC,eAAe;AAAA,QACjB,CAAC;AAAA,MACH;AAAA,MAEA,KAAK,eAAe;AAClB,eAAO;AAAA,UACL,GAAG;AAAA,UACH,YAAY;AAAA,YACV,OAAO;AAAA,cACL;AAAA,gBACE,UAAU;AAAA,kBACR,MAAM,KAAK,KAAK;AAAA,kBAChB,aAAa,KAAK,KAAK;AAAA,kBACvB,aAAa;AAAA,oBACX,MAAM,KAAK,KAAK;AAAA,kBAClB;AAAA,gBACF;AAAA,cACF;AAAA,YACF;AAAA,YACA,YAAY,EAAE,MAAM,EAAE,MAAM,KAAK,KAAK,KAAK,EAAE;AAAA,UAC/C;AAAA,QACF;AAAA,MACF;AAAA,MAEA,SAAS;AACP,cAAM,mBAA0B;AAChC,cAAM,IAAI,MAAM,qBAAqB,gBAAgB,EAAE;AAAA,MACzD;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAM,WACJ,SAC6D;AArLjE;AAsLI,UAAM,OAAO,MAAM,KAAK,QAAQ,OAAO;AAEvC,UAAM,WAAW,MAAM,KAAK,OAAO,OAAO,KAAK,IAAI,gBAAgB,IAAI,CAAC;AAExE,UAAM,EAAE,UAAU,WAAW,GAAG,YAAY,IAAI;AAEhD,UAAM,mBAAmB,SAAS,QAC9B,EAAE,SAAS,EAAE,OAAO,SAAS,MAAoB,EAAE,IACnD;AAEJ,WAAO;AAAA,MACL,OACE,gCAAS,WAAT,mBAAiB,YAAjB,mBAA0B,YAA1B,mBACI,IAAI,UAAK;AAnMrB,YAAAC;AAmMwB,gBAAAA,MAAA,KAAK,SAAL,OAAAA,MAAa;AAAA,SAC1B,KAAK,QAFR,YAEe;AAAA,MACjB,YAAW,gCAAS,WAAT,mBAAiB,YAAjB,mBAA0B,YAA1B,mBACP,OAAO,UAAQ,CAAC,CAAC,KAAK,aADf,mBAEP,IAAI,UAAK;AAvMnB,YAAAA,KAAAC,KAAAC,KAAAC,KAAAC,KAAAC;AAuMuB;AAAA,UACb,cAAc;AAAA,UACd,aAAYJ,OAAAD,MAAA,KAAK,YAAL,gBAAAA,IAAc,cAAd,OAAAC,MAA2B,KAAK,OAAO,WAAW;AAAA,UAC9D,WAAUE,OAAAD,MAAA,KAAK,YAAL,gBAAAA,IAAc,SAAd,OAAAC,MAAsB,QAAQ,KAAK,OAAO,WAAW,CAAC;AAAA,UAChE,MAAM,KAAK,WAAUE,OAAAD,MAAA,KAAK,YAAL,gBAAAA,IAAc,UAAd,OAAAC,MAAuB,EAAE;AAAA,QAChD;AAAA;AAAA,MACF,cAAc,uBAAuB,SAAS,UAAU;AAAA,MACxD,OAAO;AAAA,QACL,eAAc,oBAAS,UAAT,mBAAgB,gBAAhB,YAA+B,OAAO;AAAA,QACpD,mBAAkB,oBAAS,UAAT,mBAAgB,iBAAhB,YAAgC,OAAO;AAAA,MAC3D;AAAA,MACA,SAAS,EAAE,WAAW,YAAY;AAAA,MAClC,UAAU,CAAC;AAAA,MACX;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAM,SACJ,SAC2D;AAC3D,UAAM,OAAO,MAAM,KAAK,QAAQ,OAAO;AAEvC,UAAM,WAAW,MAAM,KAAK,OAAO,OAAO;AAAA,MACxC,IAAI,sBAAsB,EAAE,GAAG,KAAK,CAAC;AAAA,IACvC;AAEA,UAAM,EAAE,UAAU,WAAW,GAAG,YAAY,IAAI;AAEhD,QAAI,eAA4C;AAChD,QAAI,QAA4D;AAAA,MAC9D,cAAc,OAAO;AAAA,MACrB,kBAAkB,OAAO;AAAA,IAC3B;AACA,QAAI,mBACF;AAEF,QAAI,CAAC,SAAS,QAAQ;AACpB,YAAM,IAAI,MAAM,iBAAiB;AAAA,IACnC;AAEA,UAAM,SAAS,IAAI,eAAoB;AAAA,MACrC,MAAM,MAAM,YAAY;AACtB,yBAAiB,SAAS,SAAS,QAAS;AAC1C,qBAAW,QAAQ,EAAE,SAAS,MAAM,OAAO,MAAM,CAAC;AAAA,QACpD;AACA,mBAAW,MAAM;AAAA,MACnB;AAAA,IACF,CAAC;AAED,QAAI,WAAW;AACf,QAAI,aAAa;AACjB,QAAI,eAAe;AAEnB,WAAO;AAAA,MACL,QAAQ,OAAO;AAAA,QACb,IAAI,gBAGF;AAAA,UACA,UAAU,OAAO,YAAY;AAlQvC;AAmQY,qBAAS,aAAa,OAAc;AAClC,6BAAe;AACf,yBAAW,QAAQ,EAAE,MAAM,SAAS,MAAM,CAAC;AAAA,YAC7C;AAGA,gBAAI,CAAC,MAAM,SAAS;AAClB,2BAAa,MAAM,KAAK;AACxB;AAAA,YACF;AAEA,kBAAM,QAAQ,MAAM;AAGpB,gBAAI,MAAM,yBAAyB;AACjC,2BAAa,MAAM,uBAAuB;AAC1C;AAAA,YACF;AACA,gBAAI,MAAM,2BAA2B;AACnC,2BAAa,MAAM,yBAAyB;AAC5C;AAAA,YACF;AACA,gBAAI,MAAM,qBAAqB;AAC7B,2BAAa,MAAM,mBAAmB;AACtC;AAAA,YACF;AACA,gBAAI,MAAM,qBAAqB;AAC7B,2BAAa,MAAM,mBAAmB;AACtC;AAAA,YACF;AAEA,gBAAI,MAAM,aAAa;AACrB,6BAAe;AAAA,gBACb,MAAM,YAAY;AAAA,cACpB;AAAA,YACF;AAEA,gBAAI,MAAM,UAAU;AAClB,sBAAQ;AAAA,gBACN,eAAc,iBAAM,SAAS,UAAf,mBAAsB,gBAAtB,YAAqC,OAAO;AAAA,gBAC1D,mBACE,iBAAM,SAAS,UAAf,mBAAsB,iBAAtB,YAAsC,OAAO;AAAA,cACjD;AAEA,kBAAI,MAAM,SAAS,OAAO;AACxB,mCAAmB;AAAA,kBACjB,SAAS;AAAA,oBACP,OAAO,MAAM,SAAS;AAAA,kBACxB;AAAA,gBACF;AAAA,cACF;AAAA,YACF;AAEA,iBAAI,iBAAM,sBAAN,mBAAyB,UAAzB,mBAAgC,MAAM;AACxC,yBAAW,QAAQ;AAAA,gBACjB,MAAM;AAAA,gBACN,WAAW,MAAM,kBAAkB,MAAM;AAAA,cAC3C,CAAC;AAAA,YACH;AAEA,iBAAI,iBAAM,sBAAN,mBAAyB,UAAzB,mBAAgC,SAAS;AAE3C,oBAAM,UAAU,MAAM,kBAAkB,MAAM;AAC9C,0BAAW,aAAQ,SAAR,YAAgB;AAC3B,4BAAa,aAAQ,cAAR,YAAqB;AAAA,YACpC;AAEA,iBAAI,iBAAM,sBAAN,mBAAyB,UAAzB,mBAAgC,SAAS;AAE3C,+BAAgB,WAAM,kBAAkB,MAAM,QAAQ,UAAtC,YAA+C;AAE/D,yBAAW,QAAQ;AAAA,gBACjB,MAAM;AAAA,gBACN,cAAc;AAAA,gBACd;AAAA,gBACA;AAAA,gBACA,gBACE,WAAM,kBAAkB,MAAM,QAAQ,UAAtC,YAA+C;AAAA,cACnD,CAAC;AAAA,YACH;AAGA,gBAAI,MAAM,oBAAoB,aAAa,SAAS,GAAG;AACrD,yBAAW,QAAQ;AAAA,gBACjB,MAAM;AAAA,gBACN,cAAc;AAAA,gBACd;AAAA,gBACA;AAAA,gBACA,MAAM;AAAA,cACR,CAAC;AAAA,YACH;AAAA,UACF;AAAA,UAEA,MAAM,YAAY;AAChB,uBAAW,QAAQ;AAAA,cACjB,MAAM;AAAA,cACN;AAAA,cACA;AAAA,cACA;AAAA,YACF,CAAC;AAAA,UACH;AAAA,QACF,CAAC;AAAA,MACH;AAAA,MACA,SAAS,EAAE,WAAW,YAAY;AAAA,MAClC,UAAU,CAAC;AAAA,IACb;AAAA,EACF;AACF;AAEA,SAAS,0BACP,MAGmB;AApXrB;AAsXE,QAAM,UAAQ,UAAK,UAAL,mBAAY,UAAS,KAAK,QAAQ;AAEhD,MAAI,SAAS,MAAM;AACjB,WAAO,EAAE,OAAO,QAAW,YAAY,OAAU;AAAA,EACnD;AAEA,QAAM,cAAsB,MAAM,IAAI,WAAS;AAAA,IAC7C,UAAU;AAAA,MACR,MAAM,KAAK;AAAA,MACX,aAAa,KAAK;AAAA,MAClB,aAAa;AAAA,QACX,MAAM,KAAK;AAAA,MACb;AAAA,IACF;AAAA,EACF,EAAE;AAEF,QAAM,aAAa,KAAK;AAExB,MAAI,cAAc,MAAM;AACtB,WAAO,EAAE,OAAO,aAAa,YAAY,OAAU;AAAA,EACrD;AAEA,QAAM,OAAO,WAAW;AAExB,UAAQ,MAAM;AAAA,IACZ,KAAK;AACH,aAAO,EAAE,OAAO,aAAa,YAAY,EAAE,MAAM,CAAC,EAAE,EAAE;AAAA,IACxD,KAAK;AACH,aAAO,EAAE,OAAO,aAAa,YAAY,EAAE,KAAK,CAAC,EAAE,EAAE;AAAA,IACvD,KAAK;AAEH,aAAO,EAAE,OAAO,QAAW,YAAY,OAAU;AAAA,IACnD,KAAK;AACH,aAAO;AAAA,QACL,OAAO;AAAA,QACP,YAAY,EAAE,MAAM,EAAE,MAAM,WAAW,SAAS,EAAE;AAAA,MACpD;AAAA,IACF,SAAS;AACP,YAAM,mBAA0B;AAChC,YAAM,IAAI,MAAM,iCAAiC,gBAAgB,EAAE;AAAA,IACrE;AAAA,EACF;AACF;;;AD5WO,SAAS,oBACd,UAAyC,CAAC,GACnB;AACvB,QAAM,6BAA6B,MAAG;AAvDxC;AAwDI,eAAIC;AAAA,OACF,aAAQ,mBAAR,YAA0B;AAAA,QACxB,QAAQ,YAAY;AAAA,UAClB,cAAc,QAAQ;AAAA,UACtB,aAAa;AAAA,UACb,yBAAyB;AAAA,UACzB,aAAa;AAAA,QACf,CAAC;AAAA,QACD,aAAa;AAAA,UACX,aAAa,YAAY;AAAA,YACvB,cAAc,QAAQ;AAAA,YACtB,aAAa;AAAA,YACb,yBAAyB;AAAA,YACzB,aAAa;AAAA,UACf,CAAC;AAAA,UACD,iBAAiB,YAAY;AAAA,YAC3B,cAAc,QAAQ;AAAA,YACtB,aAAa;AAAA,YACb,yBAAyB;AAAA,YACzB,aAAa;AAAA,UACf,CAAC;AAAA,UACD,cAAc,oBAAoB;AAAA,YAChC,cAAc,QAAQ;AAAA,YACtB,yBAAyB;AAAA,UAC3B,CAAC;AAAA,QACH;AAAA,MACF;AAAA,IACF;AAAA;AAEF,QAAM,kBAAkB,CACtB,SACA,WAAgC,CAAC,MAEjC,IAAI,yBAAyB,SAAS,UAAU;AAAA,IAC9C,QAAQ,2BAA2B;AAAA,IACnC;AAAA,EACF,CAAC;AAEH,QAAM,WAAW,SACf,SACA,UACA;AACA,QAAI,YAAY;AACd,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,WAAO,gBAAgB,SAAS,QAAQ;AAAA,EAC1C;AAEA,WAAS,gBAAgB;AACzB,WAAS,qBAAqB,CAAC,YAAoB;AACjD,UAAM,IAAI,iBAAiB,EAAE,SAAS,WAAW,qBAAqB,CAAC;AAAA,EACzE;AAEA,SAAO;AACT;AAKO,IAAM,UAAU,oBAAoB;","names":["BedrockRuntimeClient","UnsupportedFunctionalityError","toolUse","UnsupportedFunctionalityError","_a","_b","_c","_d","_e","_f","BedrockRuntimeClient"]}